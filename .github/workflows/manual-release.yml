name: Manual Release with Version Selection

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Increment version
      id: increment_version
      run: |
        # Read current version
        current_version=$(python -c "import sys; sys.path.append('src'); from __version__ import __version__; print(__version__)")
        echo "Current version: $current_version"
        
        # Parse version parts
        IFS='.' read -r major minor patch <<< "$current_version"
        
        # Increment based on input
        case "${{ github.event.inputs.version_type }}" in
          "major")
            new_major=$((major + 1))
            new_minor=0
            new_patch=0
            ;;
          "minor")
            new_major=$major
            new_minor=$((minor + 1))
            new_patch=0
            ;;
          "patch"|*)
            new_major=$major
            new_minor=$minor
            new_patch=$((patch + 1))
            ;;
        esac
        
        new_version="${new_major}.${new_minor}.${new_patch}"
        echo "New version: $new_version"
        
        # Update __version__.py
        sed -i "s/__version__ = \"$current_version\"/__version__ = \"$new_version\"/" src/__version__.py
        
        # Set output for later steps
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
    
    - name: Commit version bump
      run: |
        git add src/__version__.py
        git commit -m "Bump version to ${{ steps.increment_version.outputs.new_version }} (${{ github.event.inputs.version_type }})"
        git push
    
    - name: Run build script
      run: |
        chmod +x build.sh
        ./build.sh
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}
      run: |
        twine upload dist/* --verbose
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.increment_version.outputs.new_version }}
        release_name: Release v${{ steps.increment_version.outputs.new_version }}
        body: |
          Release v${{ steps.increment_version.outputs.new_version }}
          
          Version increment: ${{ github.event.inputs.version_type }}
          Previous version: v${{ steps.increment_version.outputs.current_version }}
        draft: false
        prerelease: false
